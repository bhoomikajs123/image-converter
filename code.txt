import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import os

class ImageConverterApp:
    def _init_(self, root):
        self.root = root
        self.root.title("Lossless Image Compressor & Converter")
        self.root.geometry("600x500")
        self.root.configure(bg="#f0f0f0")

        # Title Label
        tk.Label(self.root, text="Lossless Image Converter", font=("Arial", 16, "bold"), bg="#f0f0f0").pack(pady=10)

        # Frame for Image Display (Fixed Size)
        self.image_frame = tk.Frame(self.root, width=300, height=250, bg="#ddd", relief="solid", bd=2)
        self.image_frame.pack(pady=10)

        # Placeholder Label inside Frame
        self.image_label = tk.Label(self.image_frame, text="Upload an Image", font=("Arial", 12), bg="#ddd")
        self.image_label.place(relx=0.5, rely=0.5, anchor="center")  # Centering text

        # Upload Button
        tk.Button(self.root, text="Upload Image", command=self.upload_image, bg="#4CAF50", fg="white",
                  font=("Arial", 12, "bold"), padx=10, pady=5, relief="raised").pack(pady=5)

        # Button Frame (For Conversions)
        self.button_frame = tk.Frame(self.root, bg="#f0f0f0")
        self.button_frame.pack(pady=20)

        # PNG Button
        tk.Button(self.button_frame, text="Convert to PNG", command=self.convert_to_png,
                  bg="#3498db", fg="white", font=("Arial", 12, "bold"), padx=10, pady=5, relief="groove").grid(row=0, column=0, padx=10)

        # JPG Button
        tk.Button(self.button_frame, text="Convert to JPG", command=self.convert_to_jpg,
                  bg="#e67e22", fg="white", font=("Arial", 12, "bold"), padx=10, pady=5, relief="sunken").grid(row=0, column=1, padx=10)

        # PDF Button
        tk.Button(self.button_frame, text="Convert to PDF", command=self.convert_to_pdf,
                  bg="#9b59b6", fg="white", font=("Arial", 12, "bold"), padx=10, pady=5, relief="ridge").grid(row=0, column=2, padx=10)

        self.file_path = None

    def upload_image(self):
        self.file_path = filedialog.askopenfilename(filetypes=[("Image Files", ".png;.jpg;.jpeg;.bmp;*.gif")])
        if self.file_path:
            image = Image.open(self.file_path)
            image.thumbnail((280, 230))  # Resize for display
            img = ImageTk.PhotoImage(image)

            self.image_label.config(image=img, text="")  # Remove placeholder text
            self.image_label.image = img  # Prevent garbage collection
            self.image_label.place(relx=0.5, rely=0.5, anchor="center")  # Keep image centered

    def convert_image(self, format):
        if not self.file_path:
            messagebox.showerror("Error", "Please upload an image first.")
            return

        output_path = os.path.splitext(self.file_path)[0] + f".{format.lower()}"
        with Image.open(self.file_path) as img:
            if format == "PNG":
                img.save(output_path, format="PNG", optimize=True)
            elif format == "JPEG":
                img = img.convert("RGB")  # Ensure RGB mode for JPEG
                img.save(output_path, format="JPEG", quality=100, optimize=True)

        messagebox.showinfo("Success", f"Image saved as {output_path}")

    def convert_to_png(self):
        self.convert_image("PNG")

    def convert_to_jpg(self):
        self.convert_image("JPEG")

    def convert_to_pdf(self):
        if not self.file_path:
            messagebox.showerror("Error", "Please upload an image first.")
            return

        output_pdf = os.path.splitext(self.file_path)[0] + ".pdf"

        with Image.open(self.file_path) as img:
            img.convert("RGB").save(output_pdf, "PDF", resolution=100.0)

        messagebox.showinfo("Success", f"Image saved as {output_pdf}")

# Run the App
if _name_ == "_main_":
    root = tk.Tk()
    app = ImageConverterApp(root)
    root.mainloop()